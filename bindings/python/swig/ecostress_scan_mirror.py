# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ecostress_scan_mirror

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ecostress_scan_mirror.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_SwigPyIterator

    def value(self):
        return _ecostress_scan_mirror.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ecostress_scan_mirror.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ecostress_scan_mirror.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ecostress_scan_mirror.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ecostress_scan_mirror.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ecostress_scan_mirror.SwigPyIterator_copy(self)

    def next(self):
        return _ecostress_scan_mirror.SwigPyIterator_next(self)

    def __next__(self):
        return _ecostress_scan_mirror.SwigPyIterator___next__(self)

    def previous(self):
        return _ecostress_scan_mirror.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ecostress_scan_mirror.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ecostress_scan_mirror.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ecostress_scan_mirror.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ecostress_scan_mirror.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ecostress_scan_mirror.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ecostress_scan_mirror.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ecostress_scan_mirror.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ecostress_scan_mirror:
_ecostress_scan_mirror.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ecostress_scan_mirror.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class EcostressScanMirror(geocal_swig.generic_object.GenericObject):
    r"""

    This is the ecostress can mirror.

    I'm not real sure about the interface for this, we may change this
    over time. But this is the initial version of this.

    C++ includes: ecostress_scan_mirror.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Scan_start=-25.5, Scan_end=25.5, Number_sample=5400):
        r"""

        Sbg::EcostressScanMirror::EcostressScanMirror(double Scan_start=-25.5, double Scan_end=25.5, int
        Number_sample=5400)
        Sbg::EcostressScanMirror::EcostressScanMirror
        Constructor.
        The scan angles are in degrees (seems more convenient than the normal
        radians we use for angles). 
        """
        _ecostress_scan_mirror.EcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_EcostressScanMirror(Scan_start, Scan_end, Number_sample))

    def scan_mirror_angle(self, Ic_sample):
        r"""

        double Sbg::EcostressScanMirror::scan_mirror_angle(double Ic_sample) const
        Sbg::EcostressScanMirror::scan_mirror_angle
        Scan mirror angle, in degrees.

        """
        return _ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle(self, Ic_sample)

    def rotation_quaterion(self, Ic_sample):
        r"""

        boost::math::quaternion< double > Sbg::EcostressScanMirror::rotation_quaterion(double Ic_sample) const
        Sbg::EcostressScanMirror::rotation_quaterion
        Rotation matrix that take the view vector for the Camera and takes it
        to the space craft coordinate system.

        """
        return _ecostress_scan_mirror.EcostressScanMirror_rotation_quaterion(self, Ic_sample)

    def _v_scan_start(self):
        r"""

        double Sbg::EcostressScanMirror::scan_start() const
        Sbg::EcostressScanMirror::scan_start
        Scan start in degrees.

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_scan_start(self)

    @property
    def scan_start(self):
        return self._v_scan_start()


    def _v_scan_end(self):
        r"""

        double Sbg::EcostressScanMirror::scan_end() const
        Sbg::EcostressScanMirror::scan_end
        Scan end in degrees.

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_scan_end(self)

    @property
    def scan_end(self):
        return self._v_scan_end()


    def _v_number_sample(self):
        r"""

        int Sbg::EcostressScanMirror::number_sample() const
        Sbg::EcostressScanMirror::number_sample
        Number sample.

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_number_sample(self)

    @property
    def number_sample(self):
        return self._v_number_sample()


    def __str__(self):
        return _ecostress_scan_mirror.EcostressScanMirror___str__(self)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_scan_mirror.delete_EcostressScanMirror

# Register EcostressScanMirror in _ecostress_scan_mirror:
_ecostress_scan_mirror.EcostressScanMirror_swigregister(EcostressScanMirror)

